# Generated by Django 5.1 on 2025-02-07 00:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
import monitoring.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Barangay',
            fields=[
                ('brgy_id', models.AutoField(primary_key=True, serialize=False)),
                ('brgy_name', models.CharField(max_length=100, verbose_name='Barangay Name')),
                ('boundary', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, verbose_name='Boundary')),
            ],
            options={
                'verbose_name_plural': 'Barangays',
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('muni_id', models.AutoField(primary_key=True, serialize=False)),
                ('muni_name', models.CharField(max_length=100, verbose_name='Municipality Name')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, verbose_name='Geom')),
            ],
            options={
                'verbose_name_plural': 'Municipalities',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('number', models.CharField(max_length=12, validators=[monitoring.models.validate_contact_number], verbose_name='Contact Number')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('code', models.CharField(blank=True, choices=[('ALM', 'ALM'), ('BIL', 'BIL'), ('CABUC', 'CABUC'), ('CAIB', 'CAIB'), ('CUL', 'CUL'), ('KAW', 'KAW'), ('MAR', 'MAR'), ('NAV', 'NAV')], max_length=20, verbose_name='code')),
                ('logo_image', models.ImageField(blank=True, null=True, upload_to='municipality_logo', verbose_name='Municipality Logo')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customuser_set', related_query_name='customuser', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set_permissions', related_query_name='customuser_permission', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('specialization', models.CharField(blank=True, choices=[('gp', 'General Practitioner'), ('pediatrician', 'Pediatrician'), ('dermatologist', 'Dermatologist'), ('cardiologist', 'Cardiologist'), ('orthopedic', 'Orthopedic Surgeon'), ('obgyn', 'Obstetrician/Gynecologist'), ('endocrinologist', 'Endocrinologist'), ('neurologist', 'Neurologist'), ('ophthalmologist', 'Ophthalmologist'), ('psychiatrist', 'Psychiatrist')], null=True, verbose_name='Specialization')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=20, null=True, verbose_name='Sex')),
                ('contact_number', models.CharField(blank=True, max_length=12, validators=[monitoring.models.validate_contact_number], verbose_name='Contact Number')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('licensed', models.CharField(unique=True, verbose_name='Licensed Number')),
                ('is_superdoctor', models.BooleanField(default=False, verbose_name='Lead  Doctor')),
                ('brgy_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doctors_brgy', to='monitoring.barangay', verbose_name='Barangay')),
                ('muni_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doctors_muni', to='monitoring.municipality', verbose_name='Municipality')),
            ],
            options={
                'verbose_name_plural': 'Doctors',
            },
        ),
        migrations.AddField(
            model_name='barangay',
            name='muni_id',
            field=models.ForeignKey(db_column='muni_id', on_delete=django.db.models.deletion.CASCADE, related_name='barangays', to='monitoring.municipality', verbose_name='Municipality Name'),
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('patient_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=200, verbose_name='First Name')),
                ('middle_name', models.CharField(max_length=200, verbose_name='Middle Name')),
                ('last_name', models.CharField(max_length=200, verbose_name='Last Name')),
                ('street', models.CharField(blank=True, choices=[('Abad Street', 'Abad Street'), ('Adobo Compound Road', 'Adobo Compound Road'), ('Ballesteros Street', 'Ballesteros Street'), ('Biliran Circumferential Road', 'Biliran Circumferential Road'), ('Biliran Rotunda', 'Biliran Rotunda'), ('Bonifacio Street', 'Bonifacio Street'), ('Burgos Street', 'Burgos Street'), ('Cabadiangan Road', 'Cabadiangan Road'), ('Calambis Bridge', 'Calambis Bridge'), ('Caneja Street', 'Caneja Street'), ('Castin Street', 'Castin Street'), ('Corvera Street', 'Corvera Street'), ('Garrido', 'Garrido'), ('Gomez', 'Gomez'), ('Imelda Road', 'Imelda Road'), ('Jaguros Street', 'Jaguros Street'), ('Leyte-Biliran Road', 'Leyte-Biliran Road'), ('Lico Road', 'Lico Road'), ('Limpiado', 'Limpiado'), ('Lomboy Road', 'Lomboy Road'), ('Looc Diversion Road', 'Looc Diversion Road'), ('Mabini Pier', 'Mabini Pier'), ('Mabini Street', 'Mabini Street'), ('Magallanes Street', 'Magallanes Street'), ('Mapuyo Loop', 'Mapuyo Loop'), ('Maripipi Circumferential Road', 'Maripipi Circumferential Road'), ('Mission', 'Mission'), ('Naval-Caibiran Cross Country Road', 'Naval-Caibiran Cross Country Road'), ('Padre Garcia Street', 'Padre Garcia Street'), ('Padre Innocentes Street', 'Padre Innocentes Street'), ('Real Street', 'Real Street'), ('Redaza Street', 'Redaza Street'), ('Rizal Street', 'Rizal Street'), ('Rojas Street', 'Rojas Street'), ('Sabenorio Street', 'Sabenorio Street'), ('Salazar', 'Salazar'), ('Salut', 'Salut'), ('San Isidro Street', 'San Isidro Street'), ('San Juan Street', 'San Juan Street'), ('San Roque Street', 'San Roque Street'), ('Santa Cruz Street', 'Santa Cruz Street'), ('Santissimo Rosario', 'Santissimo Rosario'), ('Santo Niño Road', 'Santo Niño Road'), ('Sitio Hayahay Road', 'Sitio Hayahay Road'), ('Sitio Lupa Road', 'Sitio Lupa Road'), ('Vicentillo Extension', 'Vicentillo Extension'), ('Vicentillo Street', 'Vicentillo Street'), ('Zamora', 'Zamora')], max_length=100, null=True)),
                ('birthday', models.DateField(verbose_name='Birthday')),
                ('sex', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=20, verbose_name='Sex')),
                ('contactNumber', models.CharField(max_length=12, validators=[monitoring.models.validate_contact_number], verbose_name='Contact Number')),
                ('brgy_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patients_brgy', to='monitoring.barangay', verbose_name='Barangay')),
                ('muni_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients_muni', to='monitoring.municipality', verbose_name='Municipality')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name_plural': 'Patient Records',
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('treatment_id', models.AutoField(primary_key=True, serialize=False)),
                ('vaccine_generic_name', models.CharField(choices=[('PCECCV', 'PCECCV'), ('PVRV', 'PVRV')], max_length=10, verbose_name='Vaccine Generic Name')),
                ('vaccine_brand_name', models.CharField(choices=[('Verorab', 'Verorab'), ('Speeda', 'Speeda'), ('Vaxirab', 'Vaxirab'), ('Abhayrab', 'Abhayrab')], max_length=10, verbose_name='Vaccine Brand Name')),
                ('vaccine_route', models.CharField(choices=[('intramuscular', 'Intramuscular'), ('intradermal', 'Intradermal')], max_length=50, verbose_name='Vaccine Route')),
                ('tcv_given', models.DateField(blank=True, null=True, verbose_name='TCV')),
                ('day0', models.DateField(blank=True, null=True, verbose_name='Day 0(First Dose)')),
                ('day0_arrived', models.BooleanField(default=False, verbose_name='')),
                ('day3', models.DateField(blank=True, null=True, verbose_name='Day 3(Second Dose)')),
                ('day3_arrived', models.BooleanField(default=False, verbose_name='')),
                ('day7', models.DateField(blank=True, null=True, verbose_name='Day 7(Third Dose)')),
                ('day7_arrived', models.BooleanField(default=False, verbose_name='')),
                ('day14', models.DateField(blank=True, null=True, verbose_name='Day 14')),
                ('day28', models.DateField(blank=True, null=True, verbose_name='Day 28')),
                ('booster1', models.DateField(blank=True, null=True, verbose_name='Booster1')),
                ('booster2', models.DateField(blank=True, null=True, verbose_name='Booster2')),
                ('hrig_given', models.DateField(blank=True, null=True, verbose_name='HRIG')),
                ('rig_given', models.DateField(blank=True, null=True, verbose_name='ERIG')),
                ('animal_alive', models.BooleanField(null=True, verbose_name='Animal alive')),
                ('remarks', models.CharField(blank=True, choices=[('Completed', 'Completed'), ('Incomplete', 'Incomplete'), ('Died', 'Died'), ('None', 'None')], max_length=100, null=True, verbose_name='Remarks')),
                ('doctor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doctors_patient', to='monitoring.doctor', verbose_name='Doctor')),
                ('patient_id', models.ForeignKey(db_column='patient_id', on_delete=django.db.models.deletion.CASCADE, related_name='treatments_patient', to='monitoring.patient', verbose_name='Patient')),
            ],
            options={
                'verbose_name_plural': "Patient's Treatment",
                'ordering': ['-patient_id'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='barangay',
            unique_together={('brgy_name', 'muni_id')},
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('registration_no', models.CharField(blank=True, max_length=200, null=True, verbose_name='Registration Number')),
                ('date_registered', models.DateField(verbose_name='Date Registered')),
                ('date_of_exposure', models.DateField(null=True, verbose_name='Date of Exposure')),
                ('category_of_exposure', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], max_length=10, verbose_name='Exposure Category')),
                ('source_of_exposure', models.CharField(choices=[('Dog', 'Dog'), ('Cat', 'Cat'), ('Bat', 'Bat'), ('Monkey', 'Monkey'), ('Human', 'Human'), ('Horse', 'Horse'), ('Cow', 'Cow'), ('Goat', 'Goat'), ('Pig', 'Pig'), ('Rabbit', 'Rabbit'), ('Guinea Pig', 'Guinea Pig')], max_length=10, verbose_name='Animal')),
                ('exposure_type', models.CharField(choices=[('Bite', 'Bite'), ('Non-Bite', 'Non-Bite')], max_length=10, verbose_name='Type of Exposure')),
                ('bite_site', models.CharField(choices=[('Front of Head', 'Front of Head'), ('Back of Head', 'Back of Head'), ('Face', 'Face'), ('Jaw', 'Jaw'), ('Mouth', 'Mouth'), ('Eye', 'Eye'), ('Cheek', 'Cheek'), ('Forehead', 'Forehead'), ('Temple', 'Temple'), ('Behind Ear', 'Behind Ear'), ('Front of Neck', 'Front of Neck'), ('Back of Neck', 'Back of Neck'), ('Shoulder (Left)', 'Shoulder (Left)'), ('Shoulder (Right)', 'Shoulder (Right)'), ('Upper Arm (Left)', 'Upper Arm (Left)'), ('Upper Arm (Right)', 'Upper Arm (Right)'), ('Elbow (Left)', 'Elbow (Left)'), ('Elbow (Right)', 'Elbow (Right)'), ('Forearm (Left)', 'Forearm (Left)'), ('Forearm (Right)', 'Forearm (Right)'), ('Wrist (Left)', 'Wrist (Left)'), ('Wrist (Right)', 'Wrist (Right)'), ('Palm (Left)', 'Palm (Left)'), ('Palm (Right)', 'Palm (Right)'), ('Back of Hand (Left)', 'Back of Hand (Left)'), ('Back of Hand (Right)', 'Back of Hand (Right)'), ('Thumb (Left)', 'Thumb (Left)'), ('Thumb (Right)', 'Thumb (Right)'), ('Index Finger (Left)', 'Index Finger (Left)'), ('Index Finger (Right)', 'Index Finger (Right)'), ('Middle Finger (Left)', 'Middle Finger (Left)'), ('Middle Finger (Right)', 'Middle Finger (Right)'), ('Ring Finger (Left)', 'Ring Finger (Left)'), ('Ring Finger (Right)', 'Ring Finger (Right)'), ('Little Finger (Left)', 'Little Finger (Left)'), ('Little Finger (Right)', 'Little Finger (Right)'), ('Chest (Front)', 'Chest (Front)'), ('Chest (Side)', 'Chest (Side)'), ('Abdomen (Front)', 'Abdomen (Front)'), ('Lower Back', 'Lower Back'), ('Hip (Left)', 'Hip (Left)'), ('Hip (Right)', 'Hip (Right)'), ('Thigh (Left, Front)', 'Thigh (Left, Front)'), ('Thigh (Left, Back)', 'Thigh (Left, Back)'), ('Thigh (Right, Front)', 'Thigh (Right, Front)'), ('Thigh (Right, Back)', 'Thigh (Right, Back)'), ('Knee (Left, Front)', 'Knee (Left, Front)'), ('Knee (Left, Back)', 'Knee (Left, Back)'), ('Knee (Right, Front)', 'Knee (Right, Front)'), ('Knee (Right, Back)', 'Knee (Right, Back)'), ('Calf (Left)', 'Calf (Left)'), ('Calf (Right)', 'Calf (Right)'), ('Leg (Left)', 'Leg (Left)'), ('Leg (Right)', 'Leg (Right)'), ('Leg Lower(Left)', 'Leg Lower(Left)'), ('Leg Lower(Right)', 'Leg Lower(Right)'), ('Leg Upper(Left)', 'Leg Upper(Left)'), ('Leg Upper(Right)', 'Leg Upper(Right)'), ('Leg Anterior(Left)', 'Leg Anterior(Left)'), ('Leg Anterior(Right)', 'Leg Anterior(Right)'), ('Leg Posterior(Left)', 'Leg Posterior(Left)'), ('Leg Posterior(Right)', 'Leg Posterior(Right)'), ('Ankle (Left)', 'Ankle (Left)'), ('Ankle (Right)', 'Ankle (Right)'), ('Foot (Left)', 'Foot (Left)'), ('Foot (Right)', 'Foot (Right)'), ('Toes (Left)', 'Toes (Left)'), ('Toes (Right)', 'Toes (Right)'), ('Ball of Foot (Left)', 'Ball of Foot (Left)'), ('Ball of Foot (Right)', 'Ball of Foot (Right)'), ('Heel (Left)', 'Heel (Left)'), ('Heel (Right)', 'Heel (Right)')], max_length=50, verbose_name='Bite Site')),
                ('provoked_status', models.CharField(choices=[('Provoked', 'Provoked'), ('Unprovoked', 'Unprovoked')], max_length=20, verbose_name='Provocation Status')),
                ('immunization_status', models.CharField(choices=[('Immunized', 'Immunized'), ('Unimmunized', 'Unimmunized')], max_length=20, verbose_name='Animal Vaccination')),
                ('status_of_animal', models.CharField(choices=[('Alive', 'Alive'), ('Dead', 'Dead'), ('Killed', 'Killed'), ('Lost', 'Lost')], max_length=20, verbose_name='Animal Status')),
                ('confinement_status', models.CharField(choices=[('Stray', 'Stray'), ('Leashed/Caged', 'Leashed/Caged')], max_length=20, verbose_name='Confinement Status')),
                ('washing_hands', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='Washing Wound')),
                ('human_rabies', models.BooleanField(default=False, verbose_name='Human Rabies')),
                ('latitude', models.FloatField(blank=True, default=0.0, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, default=0.0, verbose_name='Longitude')),
                ('geom', django.contrib.gis.db.models.fields.PointField(null=True, srid=4326, verbose_name='Geometry')),
                ('brgy_id', models.ForeignKey(db_column='brgy_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='history_brgy', to='monitoring.barangay', verbose_name='Barangay Exposure')),
                ('muni_id', models.ForeignKey(db_column='muni_id', on_delete=django.db.models.deletion.CASCADE, related_name='history_muni', to='monitoring.municipality', verbose_name='Municipality of Exposure')),
                ('patient_id', models.ForeignKey(db_column='patient_id', on_delete=django.db.models.deletion.CASCADE, related_name='histories', to='monitoring.patient', verbose_name='Patient')),
            ],
            options={
                'verbose_name_plural': "Patient's History",
                'ordering': ['-registration_no'],
                'unique_together': {('registration_no', 'patient_id')},
            },
        ),
    ]
